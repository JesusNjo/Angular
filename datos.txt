--Para los modulos (Organización de los modulos)
ng g m <nombre-del-modulo> <-- Crear el modulo
    @NgModule <-- Decorador-Metadata de los modulos
    declarations: [MiComponente1],
    imports: [MiComponente3],
    exports: [MiComponente2],

    Ejemplo en codigo:
 @NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule, <-- Importa modulos de angular
    AppRoutingModule
  ],
  providers: [],
  bootstrap: [AppComponent] <-- Componente principal de la app
})


-- Para los componentes (Elementos visuales o estructura de datos) REUTILIZABLES

ng g c <nombre-del-componente> <-- Crear un Componente

Se crean 4 archivos:
* El archivo del componente (TypeScript)
* El archivo HTML (HTML)
* El arhivo de estilos (CSS)
* Arhivo de pruebas (JavaScript.spec.TS)

A) COMPONENTE-Metadata
@Component({
  selector: 'app-nombre-del-componenteTYSCRIPT',
  templateUrl: './nombre-del-componenteHTML.html',
  styleUrls: ['./nombre-del-componenteEstilos.css']
})


@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})

export class AppComponent { <-- Class
  title = 'csangular'; <-- Propiedades del componente
}

B) COMPONENTE-PLANTILLA HTML
<div>
    <h1>{{titulo}}</h1> <-- PARA INTERPOLAR LAS VARIABLES Y TRAERLAS DESDE EL COMPONENTE
    <p>Este es el contenido de mi componente.</p>
</div>

C)
.toolbar {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 60px;
    display: flex;
    align-items: center;
    background-color: #1976d2;
    color: white;
    font-weight: 600;
  } <-- ESTILOS CSS


D) Testing

-- ENLACES DE datos
Una caracteristica que permite vincular e interpolar los componentes
[(ng-model)] <-- Para escuchar de adelante hacia atras
Ejemplo:
COMPONENTE:

  valorContador: number = 0;

  incrementar(){
    this.valorContador++;
  }

  decrementar(){
    this.valorContador--;
  }

  HTML:
    <h1>Contador: {{valorContador}}</h1>
    <button (click) = "incrementar()">Incrementar</button>
    <button (click) = "decrementar()">Incrementar</button>

-- METADA @Injectables


-- COMUNICACION ENTRE COMPONENTES @Input @Output

Un componente padre puede pasar datos a sus hijos mediante @Input y un hijo a un padre mediante @Output
---------------
@Input() datoEntrada:String;
1) El componente hijo, puede definir propiedades de entrada utilizando @Input. Representará los datos que se esperan recibir del padre

<app-hijo [datoEntrada]="valorDesdeElPadre"> </app-hijo>
2) En el componente padre, se vinculan datos desde la propiedad de entrada del componente hijo utulizando la sintaxis de corchetes[] en el marco del template

valorDesdeElPadre = "Hola, mundo!";
3) Cuando el valor de la propiedad en el componente padre cambia, angular automaticamente actualiza la propiedad de entrada en el componente hijo.

<p>{{datoEntrada}}
4) En el componente hijo, puedes utiliza la propiedad de entrada (datoEntrada en este caso) como cualquier otra propiedad local
--------------
@Output() messageEvent = new EventEmitter<String>();
message: string = ' ';

sendMessage(){
  this.messageEvent.emit(this.message);
}
1) Se utiliza @Output y EventEmitter para lograr la comunicacion entre componente hijo y su componente padre. Declarando una propiedad con @Output en el hijo y emitiendo con EventEmitter

<div>
  <label for="childInput">Mensaje:</label>
  <input id=""childInput" [(NgModel)]="message"/>
  <button (click)="sendMessage()">Enviar mensaje</button>
</div>

2) El archivo HTML contiene la interfaz de usuario del componente hijo. Incluye un input para que el usuario ingrese un mensaje y un boton para enviarlo. Utiliza NgModel para vincular el input con la propiedad message del componente TS

receivedMessage: string = '';
receiveMessage(message:string){
  this.receivedMessage = message;
}
3) El archivo TS define el componente ParentComponent que tiene una propiedad (receivedMessage) para almacenar mensajes recibidos del componente hijo, Incluye un método (receiveMessage) que actualiza esta propiedad cuando se emite el evento desde el componente hijo.

<div>
  <app-child (messageEvent)="receiveMessage($event)></app-child>
  <p>Mensaje recibido en el padre: {{receivedMessage}} </p>
</div>

4) La plantilla HTML del componente padre incluye el componete hijo (<app-child>) y utiliza el evento de salida messageEvent para llamar al metodo receiveMessage cuando se emite un mensaje desde el componente hijo. MUestra el mensaje recibido en la interfaz del componente


-- SERVICIOS

Un clase TypeScript para organizar y compartir logica. Para reutilizar logica

ng g s <nombre-del-servicio> <-- Para crear un servicio

@Injectable({
  providedIn: 'root'
})
export class MiServicioService{
  constructor(){ }
}
<- metodos y logica del servicio ->

-- Dependencias

Son los recursos externos y modulos de codigo que una aplicacion necesita para funcionar correctamente. Estos recursos pueden incluir bibliotecas externas. DI como en Spring

Para inyectar:
1)@Inject
2) constructor(private miServicio:MiServicio){

  }


  -- Directivas

  Son instrucciones en el marcado HTML que proporcionan funcionalidad adicional a los elementos en el DOM existente.

  ng g d <nombre-directiva> <-- Para crearla
Ejemplo:

  @Directive({
    selector: '[appMiDirectiva]'
  })
  export class MiDirectivaDirectiva{
    this.el.nativeElement.style.backgroundColor = 'yellow'
  };

  <div appMiDirectiva>
    Este elemento es de la directiva
  </div>

  -- PIPES
  Son una caracteristica que permite formatear y transformar datos en la vista de una aplicacion web de manera sencilla y legible. Funcionan para tomar un valor de entrada y lo procesar para proporcinar una representación modificada o formateada en la UI. Se utilizan en el HTML y se utilizan con la barra |.

  ng generate p <nombre-del-pipe>

  Ejemplo:
  @Pipe({
    name: 'miPipe'
  })
  export class MiPipe implements PipeTransform{
    transform(valor:any): any{
      return valor.toUpperCase();
    }
  }

  HTML: 
  <p> {{texto | miPipe}}</p>

  -- ENRUTAMIENTO

  En Angular se refiere a la capacidad de navegar entre diferentes componentes y vistas de una aplicacion sin recargar la pagina completa. Permite crear aplicaciones de una sola pagina SPA (single page aplication) donde los cambios en la URL desencadena la carga de diferentes.

Las rutas definen las correspondecia entre las URL y los componentes que deben cargarse cuando esa URL esta activa. Se configuran en un array dentro del modulo de la aplicacion
  Ejemplo:
  const routes: Routes= [
    {path: 'inicio', component: InicioComponent},
    {path: 'productos' , component: ProductosComponent},
    {path: 'contacto', component: ContactoComponent}
  ]

<router-outlet></router.outlet>:
    La directiva router-outlet se utiliza en la plantilla para indicar el lugar donde Angular debe cargar dinamicamente los componentes asociados a las rutas

    Navegacion:
    <a routerLink= "/inicio">Inicio</a>

    Parametros de ruta:
    {path: 'productp/:id',component: DetalleProductoComponent}
    <a [routerLink] = "['/producto', producto.id]">Ver detalles</a>
routerLinkActive
  Para activar la opcion del menu al enrutar con Angular, puedes utilizar la directiva routerLinkActive. Se utiliza para aplicar una clase CSS cuando el enlace asociado este activo

  <nav>
    <a routerLink="/inicio" routerLinkActive="active">Inicio</a>
    <a routerLink="/productos" routerLinkActive="active">Productos</a>
    <a routerLink="/contacto" routerLinkActive="active">Contacto</a>
  </nav>

  Parametros por la URL
  1)Definir una ruta con varios Parametros
  
  const routes:Routes = [
    {path: 'producto/:categoria/:id', component: DetalleProductoComponent}
  ];

  2) Enlazar a la ruta con multiples Parametros

  <a [routerLink] = "['/producto', producto.categoria, producto.id]"> Ver Detalles</a>

  3) Recuperar los parametros en el componente
  
  import {ActivatedRouted} from '@angular/router'

  constructor(private route:ActivatedRouter) {}

  ngOnInit(){
    this.route.params.subscribe(params=>{
      const categoria = params['categoria'];
      const productId = params['id'];
    })
  }

  const routes: Routes=[
    {path: 'producto/:categoria/:id', component: DetalleProductoComponent},
  ];


  <a [routerLink] ="['/producto', producto.categoria, producto.id]">Ver Detalles</a>

  Navegar desde el controller

  Para navegar programaticamente desde typescript en angular, puedes utilizar el servicio Router. Este servicio proporciona metodos para realizar la navegacion entre rutas
  import {Router} from '@angular/router'

  constructor(private router:Router) {}

  navegarAProducto(productoId: number){
    this.router.navigate(['/producto', productoId])
  }

  -- Estructura de control
  Las estructuras de control son herramientas que permiten manipular el flujo de ejecución en la aplicación

  1) *ngif : Permite mostrar u ocultar un elemento en funcion de una exp booleana
  <div *ngIF="mostrarElemento">
    Contenido visible si mostrarElemento es true.
  </div>

  2) *ngFor : Utilizado para iterar sobre una lista y renderizar elementos repetitivos
  <ul>
    <li *nfFor="let item of listaItems">
    {{item}}
    </li>
  </ul>

  3) ngSwitch: Muestra un bloque de contenido segun el valor de una expresion
  <div [ngSwitch]="opcion">
    <p *ngSwitchCase= "'opcion1'">Contenido para opcion 1</p>
    <p *ngSwitchCase= "'opcion2'">Contenido para opcion 2</p>
    <p *ngSwitchCase= "'opcion3'">Contenido para opcion 3</p>
    <p *ngSwitchDefault>Contenido para default</p>
  </div>

  4) ngClass: Permite cambiar dinamicamente las clases de un elemento
  <div [ngClass]="{'clase1': condicion1, 'clase2': condicion2}">
    contenido con clases dinamicas
  </div>

  5) ngStyle: Permite cambiar dinamicamente los estilos de un elemento
  <div [ngStyle]="{'color': color, 'font-size':tamano}"
    Contenido con estilos dinamicos
  </div>

  6) ngContainer: Es una estructura de control que no afecta al DOM. Se utiliza para agrupar elementos sin agregar nodos adicionales al arbol DOM

  <ng-container *ngIf= "condicion">  (PARECIDO AL FRAMENT DE REACT)
    contenido que no afecta al DOM
  </ng-container>

  7) ngTemplate/ngPlural/ngComponentOutlet

  -- FORMULARIOS

  Son una parte esencial para interactuar con el usuario y recopilar datos. Hay dos tipos principales de forumarios en angular: Los basados en plantillas (template-driven) y los reactivos (reactive)

  1) Plantillas:
  Necesitas importar el FormsModule

Ejemplo:
import {FormsModule} from '@angular/forms';

@NgModule({
  declarations: [
    //componentes
    ,
  ]
  imports: [
    FormsModule,
    //otros modulos a utilizar
  ],
  bootstrap: [AppComponent]
})
export class AppModule {}
Utilizan los formularios basados en plantillas en la sintaxis del template del HTML para construir y validar formularios. La directiva ngForm se utiliza para crear un formulario y ngModel para enlazar datos bidireccionalmente.

<form #myForm='ngForm' (ngSubmit) = 'onSubmit()'>
  <label form="name">Nombre: </label>
  <input type='text' id='name' [(ngModel)] = "user.name" required>
  
  <label form="name">Email: </label>
  <input type='text' id='email' [(ngModel)] = "user.email" required>

  <button type="submit"> Enviar </button>
</form>

  2) Reactivos:
  Necesitas importar el FormsModule

Ejemplo:
import {FormsModule} from '@angular/forms';

@NgModule({
  declarations: [
    //componentes
    ,
  ]
  imports: [
    ReactiveFormsModule,
    //otros modulos a utilizar
  ],
  bootstrap: [AppComponent]
})

Los formularios reactivos se construyen en el componente utilizando el servicio FormBuilder. Los controles se definen explicitamente y se vinculan al formulario.
:
import {FormBuilder,FormGroup,Validators} from '@angular/forms';

constructor(private fb: FormBuilder){
  this.myForm = this.fb.group({
    name: ['', Validators.required],
    Email: ['', Validators.required, Validators.email],
  })
}

<form [FormGroup]="myForm" (ngSubmit) = 'onSubmit()'>
  <label form="name">Nombre: </label>
  <input type='text' id='name' formControlName="name" required>
  
  <label form="email">Nombre: </label>
  <input type='text' id='email' formControlName="email" required>

  <button type="submit"> Enviar </button>
</form>

Manejo de estados de error:
Los cambios en los campos y el estado del formulario se manejan de manera reactiva en el componente

<div *ngIf="myForm.get('name').hasError('required') && myForm.get('name').touched">
Nombre es obligatorio
</div>

<div *ngIf="myForm.get('email').hasError('required') && myForm.get('email').touched">
Correo no valido
</div> 